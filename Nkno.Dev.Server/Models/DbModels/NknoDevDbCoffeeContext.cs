// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Nkno.Dev.Server.Models.DbModels;

public partial class NknoDevDbCoffeeContext : DbContext
{
    public NknoDevDbCoffeeContext(DbContextOptions<NknoDevDbCoffeeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BrewType> BrewTypes { get; set; }

    public virtual DbSet<Coffee> Coffees { get; set; }

    public virtual DbSet<CoffeeType> CoffeeTypes { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<ReviewDetail> ReviewDetails { get; set; }

    public virtual DbSet<RoastType> RoastTypes { get; set; }

    public virtual DbSet<RoastersShop> RoastersShops { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BrewType>(entity =>
        {
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<Coffee>(entity =>
        {
            entity.Property(e => e.FlavourNotes).HasMaxLength(200);

            entity.HasOne(d => d.CoffeeType).WithMany(p => p.Coffees)
                .HasForeignKey(d => d.CoffeeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.OriginCountry).WithMany(p => p.Coffees)
                .HasForeignKey(d => d.OriginCountryId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Roast).WithMany(p => p.Coffees).HasForeignKey(d => d.RoastId);

            entity.HasOne(d => d.Roaster).WithMany(p => p.Coffees)
                .HasForeignKey(d => d.RoasterId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.User).WithMany(p => p.Coffees)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<CoffeeType>(entity =>
        {
            entity.Property(e => e.CoffeeTypeName)
                .IsRequired()
                .HasMaxLength(75);

            entity.HasOne(d => d.BrewType).WithMany(p => p.CoffeeTypes).HasForeignKey(d => d.BrewTypeId);
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasOne(d => d.Coffee).WithMany(p => p.Reviews).HasForeignKey(d => d.CoffeeId);

            entity.HasOne(d => d.ReviewDetail).WithMany(p => p.Reviews).HasForeignKey(d => d.ReviewDetailId);

            entity.HasOne(d => d.User).WithMany(p => p.Reviews).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<ReviewDetail>(entity =>
        {
            entity.Property(e => e.Comments).HasMaxLength(3000);
        });

        modelBuilder.Entity<RoastType>(entity =>
        {
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<RoastersShop>(entity =>
        {
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Website).HasMaxLength(200);

            entity.HasOne(d => d.Country).WithMany(p => p.RoastersShops).HasForeignKey(d => d.CountryId);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.Location).HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}